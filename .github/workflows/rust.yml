# SPDX-FileCopyrightText: 2020 Johannes Siipola
# SPDX-FileCopyrightText: 2020 Tuomas Siipola
#
# SPDX-License-Identifier: AGPL-3.0-or-later

name: Rust

on: [push, pull_request]

jobs:
  reuse:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: REUSE Compliance Check
        uses: fsfe/reuse-action@v1.1

  clippy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Install
        run: rustup component add clippy
      - name: Run
        run: cargo clippy

  rustfmt:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Install
        run: rustup component add rustfmt
      - name: Run
        run: cargo fmt --all -- --check

  test:
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2
      - name: Build
        run: cargo build
      - name: Test
        run: cargo test

  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-20.04
            target: x86_64-unknown-linux-gnu
          - os: ubuntu-20.04
            target: x86_64-unknown-linux-musl
          - os: macos-11
            target: x86_64-apple-darwin
    steps:
      - uses: actions/checkout@v2
      - name: Setup
        run: sudo apt install musl-tools -y
        if: matrix.target == 'x86_64-unknown-linux-musl'
      - name: Add target
        run: rustup target add ${{ matrix.target }}
      - name: Build
        run: cargo build --release --target=${{ matrix.target }}
      - name: Move
        run: mv target/${{ matrix.target }}/release/pio pio-${{ matrix.target }}
      - name: Upload
        uses: actions/upload-artifact@v1
        with:
          name: pio-${{ matrix.target }}
          path: pio-${{ matrix.target }}

  create_release:
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
      - name: Get version from tag
        id: tag_name
        run: echo ::set-output name=current_version::${GITHUB_REF#refs/tags/}
        shell: bash
      - uses: actions/checkout@v2
      - name: Get Changelog Entry
        id: changelog_reader
        uses: mindsers/changelog-reader-action@v1
        with:
          version: ${{ steps.tag_name.outputs.current_version }}
          path: CHANGELOG.md
      - name: Create release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          body: ${{ steps.changelog_reader.outputs.log_entry }}
          draft: false
          prerelease: false

  upload_release_assets:
    needs: [create_release, build]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        artifact:
          - pio-x86_64-unknown-linux-gnu
          - pio-x86_64-unknown-linux-musl
          - pio-x86_64-apple-darwin
    steps:
      - name: Download artifact
        uses: actions/download-artifact@v2
        with:
          name: ${{ matrix.artifact }}
      - name: Upload release asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create_release.outputs.upload_url }}
          asset_path: ${{ matrix.artifact }}
          asset_name: ${{ matrix.artifact }}
          asset_content_type: application/octet-stream
